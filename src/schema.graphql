enum Quantifer {
  DEFAULT
  EXISTENTIAL
  UNIVERSAL
  NEXISTENTIAL
  NUNIVERSAL

}

directive @backtrack(if: Quantifer) on FIELD|FIELD_DEFINITION


input AttributeMatch {
  name: String!
  value: String!
}

type XAttribute {
  id: ID!
  name: String!
  value: String!
}

type XElement {
  id: ID!
  name: String!
  attributes(matchAttribute: AttributeMatch backtrack: Quantifer): [XAttribute]!
  attribute(matchAttribute: AttributeMatch): XAttribute

  elements(name: String matchAttribute: AttributeMatch backtrack: Quantifer): [XElement]!
  element(name: String matchAttribute: AttributeMatch): [XElement]!
}

type XDocument {
  id: ID!
  name: String!
  attributes(matchAttribute: AttributeMatch): [XAttribute]!
  attribute(matchAttribute: AttributeMatch!): XAttribute

  elements(name: String matchAttribute: AttributeMatch): [XElement]!
  element(name: String matchAttribute: AttributeMatch): XElement!
}

type Query {
  documents(search: String): [XDocument!]!
  document(id: ID): XDocument!

  elements(name: String matchAttribute: AttributeMatch): [XElement]!
  element(id: ID): XElement
}

type Mutation {
  document(name: String! body: String!): XDocument!
}
